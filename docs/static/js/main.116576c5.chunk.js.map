{"version":3,"sources":["components/animation/engine.ts","engine/camera.tsx","Lifecycle.tsx","engine/renderers.tsx","engine/entity.tsx","engine/game.tsx","engine/scene.tsx","engine/engine.tsx","engine/Loop.tsx","engine/app-renderers/App.tsx","reportWebVitals.ts","index.tsx"],"names":["AnimationFactory","OffsetAnimationComponent","xFunc","yFunc","beforeUpdate","afterUpdate","update","d","e","s","ps","properties","position","x","y","PositionAnimationComponent","Cameras","WorldToCameraCoords","pos","cam","CenterCameraOnVector2","size","width","height","init","canvas","engineState","Rengine","Game","InitEngine","undefined","Scene","CreateScene","demoPurpleCube1","timePassed","secondBoxAdded","engineStateIn","box","Entity","MakeEntity","anchor","rotation","scale","Math","PI","Renderer","BoxRenderer","Colors","rgbaToColor","folder","MakeFolderEntity","components","push","folder2","folder3","AddEntityToScene","StyleConversions","CreateRotation","amt","CreateScale","CreateTransform","transformations","reduce","prev","curr","ComputeEntityWorldTransformation","es","rotatedPoint","MathUtil","RotatePositionAboutPoint","translation","finalPosition","TransformationToStyle","t","left","config","top","transform","Renderers","BasicTextureRenderer","esInit","Error","BoxRendererReact","c","tranformation","transformStyle","style","background","ColorToString","at","ctx","getContext","save","fillStyle","translate","rotate","boxWidth","boxHeight","fillRect","restore","entityID","Entities","props","render","shaders","uuid","String","state","entities","placeOriginAndAnchorAtGeometricCenter","bounds","map","EntitiesUtils","ComputeEntityBoundingBox","minX","pr","cu","minXminY","minY","maxX","maxXmaxY","maxY","halfMaxDim","p","abs","a","Vec2","Sub","delta","ent","newState","finComp","pe","pns","vals","ents","Add","Mul","applyFolderTransformation","ind","key","GetEntityOrigin","origin","GetEntityBBOrigin","newOriginPos","eBB","minXmaxY","pointsToConsider","maxXminY","Games","TickActiveScene","activeScene","newActiveScene","scenes","window","innerWidth","innerHeight","Scenes","sceneID","setActive","newScene","concat","ActivateScene","find","foundScene","changedScene","RemoveEntityFromScene","filter","et","Camera","StyleConversion","Animation","v1","v2","Div","Neg","r","g","b","rad","about","cos","sin","run","rise","ANIMATION_FRAME","LAST_UPDATE","FRAMES_SINCE_STARTUP","EngineStateContainer","lastState","StartGameLoop","cb","animFrameBefore","Date","now","requestAnimationFrame","DoFrame","EndGameLoop","cancelAnimationFrame","currTimeMs","newState2","canvasStyle","GameCanvas","canvasRef","useRef","useEffect","current","beginPath","stroke","forEach","ref","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","App","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.116576c5.chunk.js","sourcesContent":["export class AnimationFactory {\n\n  static OffsetAnimationComponent = (xFunc: (delta: number, x: number, y: number) => number) => (yFunc: (delta: number, x: number, y: number) => number) => \n  (beforeUpdate?: UpdateFunction) => (afterUpdate?: UpdateFunction): Component => {\n    return {\n      update: (d, e, s, ps) => {\n        if(beforeUpdate){ \n          let [eR, esR] = beforeUpdate(d, e, s, ps);\n          e = eR;\n          ps = esR;\n        }\n        e.properties.position = {\n          x: e.properties.position.x + xFunc(d, e.properties.position.x, e.properties.position.y),\n          y: e.properties.position.y + yFunc(d, e.properties.position.x, e.properties.position.y),\n        };\n        if(afterUpdate){ \n          let [eAR, eAsR] = afterUpdate(d, e, s, ps);\n          e = eAR;\n          ps = eAsR;\n        }\n        return [e, ps];\n      }\n    };\n  };\n  \n  static PositionAnimationComponent = (xFunc: (delta: number, x: number, y: number) => number) => (yFunc: (delta: number, x: number, y: number) => number) =>\n  (beforeUpdate?: UpdateFunction) => (afterUpdate?: UpdateFunction): Component => {\n    return {\n      update: (d, e, s, ps) => {\n        if(beforeUpdate){ \n          let [eR, esR] = beforeUpdate(d, e, s, ps);\n          e = eR;\n          ps = esR;\n        }\n        e.properties.position = {\n          x: xFunc(d, e.properties.position.x, e.properties.position.y),\n          y: yFunc(d, e.properties.position.x, e.properties.position.y),\n        };\n        if(afterUpdate){ \n          let [eAR, eAsR] = afterUpdate(d, e, s, ps);\n          e = eAR;\n          ps = eAsR;\n        }\n        return [e, ps];\n      }\n    };\n  };\n\n}","export class Cameras {\n\n  static WorldToCameraCoords = (pos: Vector2, cam: Camera): Vector2 => {\n    return {\n      x: pos.x - cam.position.x,\n      y: pos.y - cam.position.y,\n    };\n  };\n  \n  static CenterCameraOnVector2 = (pos: Vector2, cam: Camera): Camera => {\n    return {\n      ...cam,\n      position: {\n        x: pos.x - cam.size.width / 2,\n        y: pos.y - cam.size.height / 2,\n      },\n    };\n  };\n  \n}","import Rengine, { Colors } from \"./engine/engine\";\nimport { EndGameLoop, FRAMES_SINCE_STARTUP } from \"./engine/Loop\";\nimport { AnimationFactory } from './components/animation/engine';\n\n/**\n * Welcome to the dev sesh! Here's a quick overview of what each\n * of the global config variables do.\n * \n * Rendering Engine:\n * Whether to render elements with react or just the canvas.\n * \n * Loop Mode:\n * Whether the frames draw on a clock interval or request animation frames.\n * \n * \n * Transformation Points Key:\n * \n * Blue Square --> entity position\n * Red Square --> entity anchor\n * Black Line --> connects paired entities' anchors to their positions\n * \n * \n * FPS Limit:\n * The maximum FPS mathematically possible assuming no lag.\n */\n\nexport const RENDERING_ENGINE: RenderingEngineOption = 'canvas';\nexport const LOOP_MODE: LoopMode = 'animation';\nexport const SHOW_TRANSFORMATION_POINTS: boolean = false;\nexport const FPS_LIMIT = 60;\n\nexport const init = (canvas?: HTMLCanvasElement): EngineState => {\n  let engineState = Rengine.Game.InitEngine(undefined, canvas);\n  engineState = Rengine.Scene.CreateScene(engineState)('root', true);\n  \n  return demoPurpleCube1(engineState);\n  // return demoPurpleCube2(engineState);\n  // return demoPurpleCube3(engineState);\n  // return demoMultiCubeInLine(engineState, 20);\n  // return demoMultiCubeInPlace(engineState, 20);\n  // return demoTimeDif(engineState);\n}\n\nlet timePassed = 0;\nlet secondBoxAdded = false;\n\nexport const update = (delta: number, es: EngineState): EngineState => {\n  timePassed += delta;\n  if(!secondBoxAdded && \n    FRAMES_SINCE_STARTUP > 120\n    // timePassed > 2000\n    // why is timePassed > 2000 better for syncing?\n    ){\n    secondBoxAdded = true;\n    // NOTE: This return statement is for demoTimeDif\n    // return addSecondBox(es);\n  }\n  if(timePassed > 20000){\n    EndGameLoop();\n  }\n  return es;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// DEMO CODE BEGIN -------------------------------------------------------------\n//\n// DEMO CODE BEGIN -------------------------------------------------------------\n//\n// DEMO CODE BEGIN -------------------------------------------------------------\n//\n// DEMO CODE BEGIN -------------------------------------------------------------\n\n// eslint-disable-next-line\nconst demoPurpleCube1 = (engineStateIn: EngineState): EngineState => {\n  let engineState = engineStateIn;\n  // Make our box\n  let box = Rengine.Entity.MakeEntity(\n    {\n      position: { x: 50, y: 50 },\n      anchor: { x: 0, y: 0 },\n      size: { width: 50, height: 50 },\n      rotation: 0,\n      scale: { x: 1, y: 1 }\n    },\n    [{\n      update: (d, e, s, ps) => { e.properties.rotation = e.properties.rotation + (0.4 * (d/1000) * Math.PI); return [e, ps]; }\n    }],\n    Rengine.Renderer.BoxRenderer(engineState)(Colors.rgbaToColor(255, 0, 255, 1)),\n    []\n  );\n  // Make the first rotating parent\n  let folder = Rengine.Entity.MakeFolderEntity(engineState)([box]);\n  folder.properties.position = { x: 100, y: 100 };\n  folder.components.push(\n    {\n      update: (d, e, s, ps) => {\n        return [{ ...e, properties: { ...e.properties, rotation: e.properties.rotation + (0.4 * (d/1000) * Math.PI) }}, ps];\n    }\n  });\n  // Make the second rotating parent\n  let folder2 = Rengine.Entity.MakeFolderEntity(engineState)([folder]);\n  folder2.properties.position = { x: 100, y: 100 };\n  folder2.components.push(\n    {\n      update: (d, e, s, ps) => {\n        return [{ ...e, properties: { ...e.properties, rotation: e.properties.rotation + (0.4 * (d/1000) * Math.PI) }}, ps];\n    }\n  });\n  // Make the second rotating parent\n  let folder3 = Rengine.Entity.MakeFolderEntity(engineState)([folder2]);\n  folder3.properties.position = { x: 100, y: 100 };\n  folder3.components.push(\n    {\n      update: (d, e, s, ps) => {\n        return [{ ...e, properties: { ...e.properties, rotation: e.properties.rotation + (0.4 * (d/1000) * Math.PI) }}, ps];\n    }\n  });\n  // Add the second parent to the scene, adding all entities by extension\n  engineState = Rengine.Scene.AddEntityToScene(engineState)('root')(folder3);\n  return engineState;\n}\n\n// This cube stays \"in place\" because we are counter-rotating its parent now\n// eslint-disable-next-line\nconst demoPurpleCube2 = (engineStateIn: EngineState): EngineState => {\n  let engineState = engineStateIn;\n  // Make our box\n  let box = Rengine.Entity.MakeEntity(\n    {\n      position: { x: 50, y: 50 },\n      anchor: { x: 0, y: 0 },\n      size: { width: 50, height: 50 },\n      rotation: 0,\n      scale: { x: 1, y: 1 }\n    },\n    [{\n      update: (d, e, s, ps) => { e.properties.rotation = e.properties.rotation - ((d/1000) * Math.PI); return [e, ps]; }\n    }, AnimationFactory.PositionAnimationComponent((d, x, y) => x + 10 * d / 1000)((d, x, y) => y + 10 * d / 1000)()()],\n    Rengine.Renderer.BoxRenderer(engineState)(Colors.rgbaToColor(255, 0, 255, 1)),\n    []\n  );\n  // Make the first rotating parent\n  let folder = Rengine.Entity.MakeFolderEntity(engineState)([box]);\n  folder.properties.position = { x: 100, y: 100 };\n  // Make the second rotating parent\n  let folder2 = Rengine.Entity.MakeFolderEntity(engineState)([folder]);\n  folder2.properties.position = { x: 100, y: 100 };\n  folder2.components.push(\n    {\n      update: (d, e, s, ps) => {\n        return [{ ...e, properties: { ...e.properties, rotation: e.properties.rotation + ((d/1000) * Math.PI) }}, ps];\n    }\n  },\n  AnimationFactory.PositionAnimationComponent((d, x, y) => x - 25 * d / 1000)((d, x, y) => y - 25 * d / 1000)()()\n  );\n  // Add the second parent to the scene, adding all entities by extension\n  engineState = Rengine.Scene.AddEntityToScene(engineState)('root')(folder2);\n  return engineState;\n}\n\n// eslint-disable-next-line\nconst demoPurpleCube3 = (engineStateIn: EngineState): EngineState => {\n  let engineState = engineStateIn;\n  // Make our box\n  let box = Rengine.Entity.MakeEntity(\n    {\n      position: { x: 50, y: 50 },\n      anchor: { x: 0, y: 0 },\n      size: { width: 50, height: 50 },\n      rotation: 0,\n      scale: { x: 1, y: 1 }\n    },\n    [{\n      update: (d, e, s, ps) => { e.properties.rotation = e.properties.rotation - (3 * (d/1000) * Math.PI); return [e, ps]; }\n    }],\n    Rengine.Renderer.BoxRenderer(engineState)(Colors.rgbaToColor(255, 0, 255, 1)),\n    []\n  );\n  // Make the first rotating parent\n  let folder = Rengine.Entity.MakeFolderEntity(engineState)([box]);\n  folder.properties.position = { x: 100, y: 100 };\n  folder.components.push(\n    {\n      update: (d, e, s, ps) => {\n        return [{ ...e, properties: { ...e.properties, rotation: e.properties.rotation + ((d/1000) * Math.PI) }}, ps];\n    }\n  },\n  AnimationFactory.PositionAnimationComponent((d, x, y) => x - 25 * d / 1000)((d, x, y) => y - 25 * d / 1000)()()\n  );\n  // Make the second rotating parent\n  let folder2 = Rengine.Entity.MakeFolderEntity(engineState)([folder]);\n  folder2.properties.position = { x: 100, y: 100 };\n  folder2.components.push(\n    {\n      update: (d, e, s, ps) => {\n        return [{ ...e, properties: { ...e.properties, rotation: e.properties.rotation + ((d/1000) * Math.PI) }}, ps];\n    }\n  },\n  AnimationFactory.PositionAnimationComponent((d, x, y) => x - 25 * d / 1000)((d, x, y) => y - 25 * d / 1000)()()\n  );\n  // Add the second parent to the scene, adding all entities by extension\n  engineState = Rengine.Scene.AddEntityToScene(engineState)('root')(folder2);\n  return engineState;\n}\n\n// eslint-disable-next-line\nconst demoMultiCubeInLine = (engineStateIn: EngineState, amount: number): EngineState => {\n  let engineState = engineStateIn;\n  for(let i = 0; i < amount; i++){\n    // Make our box\n    let box = Rengine.Entity.MakeEntity(\n      {\n        position: { x: i * 25, y: i * 25 },\n        anchor: { x: 0, y: 0 },\n        size: { width: 50, height: 50 },\n        rotation: 0,\n        scale: { x: 1, y: 1 }\n      },\n      [{\n        update: (d, e, s, ps) => { e.properties.rotation = e.properties.rotation + (0.3 * (d/1000) * Math.PI); return [e, ps]; }\n      }],\n      Rengine.Renderer.BoxRenderer(engineState)(Colors.rgbaToColor(255, 0, 255, 1)),\n      []\n    );\n    // Add the box to the scene\n    engineState = Rengine.Scene.AddEntityToScene(engineState)('root')(box);\n  }\n  return engineState;\n}\n\n// eslint-disable-next-line\nconst demoMultiCubeInPlace = (engineStateIn: EngineState, amount: number): EngineState => {\n  let engineState = engineStateIn;\n  for(let i = 0; i < amount; i++){\n    // Make our box\n    let box = Rengine.Entity.MakeEntity(\n      {\n        // NOTICE: ANCHOR = POSITION now, so our boxes won't rotate about center of screen,\n        // but around their individual origins\n        position: { x: i * 25, y: i * 25 },\n        anchor: { x: i * 25, y: i * 25 },\n        size: { width: 50, height: 50 },\n        rotation: 0,\n        scale: { x: 1, y: 1 }\n      },\n      [{\n        update: (d, e, s, ps) => { e.properties.rotation = e.properties.rotation + ((d/1000) * Math.PI); return [e, ps]; }\n      }],\n      Rengine.Renderer.BoxRenderer(engineState)(Colors.rgbaToColor(255, 0, 255, 1)),\n      []\n    );\n    // Add the box to the scene\n    engineState = Rengine.Scene.AddEntityToScene(engineState)('root')(box);\n  }\n  return engineState;\n}\n\n\n// NOTE: demoTimeDif is called in init, while updateTimeDif is called in update\n// eslint-disable-next-line\nconst demoTimeDif = (engineStateIn: EngineState): EngineState => {\n  let engineState = engineStateIn;\n  // Make our first box\n  let box1 = Rengine.Entity.MakeEntity(\n    {\n      position: { x: 100, y: 100 },\n      anchor: { x: 0, y: 0 },\n      size: { width: 50, height: 50 },\n      rotation: 0,\n      scale: { x: 1, y: 1 }\n    },\n    [{\n      update: (d, e, s, ps) => { e.properties.rotation = e.properties.rotation + ((d/1000) * Math.PI); return [e, ps]; }\n    }],\n    Rengine.Renderer.BoxRenderer(engineState)(Colors.rgbaToColor(255, 0, 255, 1)),\n    []\n  );\n  // Add the second parent to the scene, adding all entities by extension\n  engineState = Rengine.Scene.AddEntityToScene(engineState)('root')(box1);\n  return engineState;\n}\n\n// eslint-disable-next-line\nconst addSecondBox = (engineStateIn: EngineState): EngineState => {\n  let engineState = engineStateIn;\n  // Make our second box\n  let box2 = Rengine.Entity.MakeEntity(\n    {\n      position: { x: -100, y: -100 },\n      anchor: { x: 0, y: 0 },\n      size: { width: 50, height: 50 },\n      rotation: 0,\n      scale: { x: 1, y: 1 }\n    },\n    [{\n      update: (d, e, s, ps) => { e.properties.rotation = e.properties.rotation + ((d/1000) * Math.PI); return [e, ps]; }\n    }],\n    Rengine.Renderer.BoxRenderer(engineState)(Colors.rgbaToColor(0, 0, 255, 1)),\n    []\n  );\n  // Add the second parent to the scene, adding all entities by extension\n  engineState = Rengine.Scene.AddEntityToScene(engineState)('root')(box2);\n  return engineState;\n}","import React from 'react';\nimport { RENDERING_ENGINE, SHOW_TRANSFORMATION_POINTS } from '../Lifecycle';\nimport { Colors, MathUtil } from \"./engine\";\n\nexport class StyleConversions {\n\n  static CreateRotation = (amt: number) => () => 'rotate(' + amt + 'rad)';\n  static CreateScale = (s: Vector2) => () => 'scale(' + s.x + ',' + s.y + ')';\n\n  static CreateTransform = (transformations: (() => string)[]) => {\n    return transformations.reduce((prev, curr) => (prev + ' ' + curr()), '');\n  }\n\n  static ComputeEntityWorldTransformation = (es: EngineState) => (e: Entity): Transformation => {\n    const rotatedPoint = MathUtil.RotatePositionAboutPoint(-e.properties.rotation)(e.properties.anchor)(e.properties.position);\n    let difX = rotatedPoint.x - e.properties.anchor.x, difY = rotatedPoint.y - e.properties.anchor.y;\n    const t: Transformation = {\n      translation: { x: difX, y: difY },\n      finalPosition: rotatedPoint,\n      scale: e.properties.scale,\n      rotation: e.properties.rotation,\n      anchor: e.properties.anchor\n    };\n    return t;\n  };\n\n  static TransformationToStyle = (es: EngineState) => (t: Transformation,\n    e: Entity\n  ): React.CSSProperties => {\n    return {\n      position: \"absolute\",\n      width: e.properties.size.width,\n      height: e.properties.size.height,\n      left:\n        (es.config.width / 2) + t.finalPosition.x -\n        (t.scale.x * e.properties.size.width) / 2,\n      top:\n      (es.config.height / 2) + t.finalPosition.y -\n        (t.scale.y * e.properties.size.height) / 2,\n      transform: StyleConversions.CreateTransform([StyleConversions.CreateScale(t.scale), StyleConversions.CreateRotation(t.rotation)]),\n    };\n  };\n\n}\n\nexport class Renderers {\n  static BasicTextureRenderer = (esInit: EngineState) => (\n    t: Texture\n  ): Render => {\n    if(RENDERING_ENGINE === \"react\"){\n      const renderFunc: Render = (es: EngineState) => (e: Entity) => {\n        const tranformation = StyleConversions.ComputeEntityWorldTransformation(es)(e);\n        const transformStyle = StyleConversions.TransformationToStyle(es)(tranformation, e);\n        return <img src={t.url} alt={t.alt} style={transformStyle} />;\n      };\n      return renderFunc;\n    } else {\n      throw new Error(\"unimplemented!\");\n    }\n  };\n  static BoxRendererReact = (esInit: EngineState) => (c: Color): Render => {\n    const renderFunc: Render = (es: EngineState) => (e: Entity) => {\n      const tranformation = StyleConversions.ComputeEntityWorldTransformation(es)(e);\n      const transformStyle = StyleConversions.TransformationToStyle(es)(tranformation, e);\n      return (\n        <div\n          style={{ ...transformStyle, background: Colors.ColorToString(c) }}\n        />\n      );\n    };\n    return renderFunc;\n  };\n  static BoxRenderer = (esInit: EngineState) => {\n    if(RENDERING_ENGINE === \"canvas\"){\n      if(esInit.canvas === null) throw new Error('Cannot render with a canvas renderer without a canvas being linked to the engine state!');\n      return ((c: Color): Render => {\n        const renderFunc: Render = (es: EngineState) => (e: Entity) => {\n          if(es.canvas === null) throw new Error('Cannot render with a canvas renderer without a canvas being linked to the engine state!');\n          const tranformation = StyleConversions.ComputeEntityWorldTransformation(es)(e);\n          const at: Transformation = {\n            ...tranformation,\n            anchor: {\n              x: tranformation.anchor.x + (es.config.width / 2),\n              y: (es.config.height / 2) + tranformation.anchor.y\n            }\n          };\n          const ctx = es.canvas?.getContext('2d');\n          if(!ctx) throw new Error('Cannot get canvas context!');\n          ctx.save();\n          ctx.fillStyle = Colors.ColorToString(c);\n          ctx.translate(at.anchor.x, at.anchor.y);\n          ctx.translate(at.translation.x, at.translation.y);\n          ctx.rotate(at.rotation);\n          const boxWidth = (e.properties.size.width * at.scale.x);\n          const boxHeight = (e.properties.size.height * at.scale.y);\n          ctx.fillRect(-(boxWidth / 2), \n          -(boxHeight / 2),\n          boxWidth, boxHeight);\n          ctx.restore();\n          if(SHOW_TRANSFORMATION_POINTS){\n            ctx.save();\n            ctx.fillStyle = 'red';\n            ctx.translate(at.anchor.x, at.anchor.y);\n            ctx.fillRect(-10, -10, 20, 20);\n            ctx.restore();\n            ctx.save();\n            ctx.fillStyle = 'blue';\n            ctx.translate(at.anchor.x, at.anchor.y);\n            ctx.translate(at.translation.x, at.translation.y);\n            ctx.fillRect(-5, -5, 10, 10);\n            ctx.restore();\n            ctx.save();\n            ctx.strokeStyle = 'black';\n            ctx.translate(at.anchor.x, at.anchor.y);\n            ctx.translate(at.translation.x, at.translation.y);\n            ctx.moveTo(0,0);\n            ctx.lineTo(-at.translation.x, -at.translation.y);\n            ctx.stroke();\n            ctx.restore();\n          }\n        };\n        return renderFunc;\n      });\n    } else if (RENDERING_ENGINE === \"react\"){\n      return (c: Color): Render => {\n        const renderFunc: Render = (es: EngineState) => (e: Entity) => {\n          if(SHOW_TRANSFORMATION_POINTS){\n            throw new Error('Transformation point rendering not currently supported in React.');\n          }\n          const tranformation = StyleConversions.ComputeEntityWorldTransformation(es)(e);\n          const transformStyle = StyleConversions.TransformationToStyle(es)(tranformation, e);\n          return (\n            <div\n              style={{ ...transformStyle, background: Colors.ColorToString(c) }}\n            />\n          );\n        };\n        return renderFunc;\n      }\n    } else {\n      throw new Error('unimplemented!');\n    }\n  };\n}","import React from 'react';\nimport { RENDERING_ENGINE, SHOW_TRANSFORMATION_POINTS } from '../Lifecycle';\nimport { MathUtil, Vec2 } from \"./engine\";\nimport { StyleConversions } from './renderers';\n\nlet entityID: number = 0;\n\nexport class Entities {\n\n  static MakeEntity = (\n    props: EntityProps,\n    components: Component[],\n    render: Render,\n    shaders: Shader[]\n  ): Entity => {\n    entityID++;\n    return {\n      uuid: String(entityID),\n      properties: props,\n      components: components,\n      render: render,\n      shaders: shaders,\n    };\n  };\n\n  static MakeFolderEntity = (state: EngineState) => (\n    entities: Entity[], placeOriginAndAnchorAtGeometricCenter?: boolean\n  ): FolderEntity => {\n    const applyFolderTransformation = (e: FolderEntity, ents: Entity[]): Entity[] => {\n      return ents.map((a) => {\n        const v = {\n          ...a,\n          properties: {\n            ...a.properties,\n            position: Vec2.Add(a.properties.position)(MathUtil.RotatePositionAboutPoint(-e.properties.rotation)(e.properties.anchor)((e.properties.position))),\n            anchor: Vec2.Add(a.properties.anchor)(MathUtil.RotatePositionAboutPoint(-e.properties.rotation)(e.properties.anchor)((e.properties.position))),\n            scale: Vec2.Mul(a.properties.scale)(e.properties.scale),\n            rotation: ((a.properties.rotation + e.properties.rotation) % (2 * Math.PI)),\n          }\n        };\n        return v;\n      });\n    };\n    let bounds: BoundingBox[] = entities.map((e) =>\n      EntitiesUtils.ComputeEntityBoundingBox(state)(e)\n    );\n    let minX = bounds.reduce((pr, cu) => {\n      if (cu.minXminY.x < pr.minXminY.x) {\n        return cu;\n      } else {\n        return pr;\n      }\n    }, bounds[0]).minXminY.x;\n    let minY = bounds.reduce((pr, cu) => {\n      if (cu.minXminY.y < pr.minXminY.y) {\n        return cu;\n      } else {\n        return pr;\n      }\n    }, bounds[0]).minXminY.y;\n    let maxX = bounds.reduce((pr, cu) => {\n      if (cu.maxXmaxY.x > pr.maxXmaxY.x) {\n        return cu;\n      } else {\n        return pr;\n      }\n    }, bounds[0]).maxXmaxY.x;\n    let maxY = bounds.reduce((pr, cu) => {\n      if (cu.maxXmaxY.y > pr.maxXmaxY.y) {\n        return cu;\n      } else {\n        return pr;\n      }\n    }, bounds[0]).maxXmaxY.y;\n    let newOriginPos: Vector2 = { x: (minX + maxX) / 2, y: (minY + maxY) / 2 };\n    entityID++;\n    let position: Vector2 = placeOriginAndAnchorAtGeometricCenter === true ? newOriginPos : { x: 0, y: 0 };\n    let halfMaxDim = [minX, maxX, minY, maxY].reduce((p, c) => (Math.abs(c) > p ? c : p), 0);\n    let ret: FolderEntity = {\n      uuid: String(entityID),\n      entities: placeOriginAndAnchorAtGeometricCenter === true \n      ? entities.map(a => { return {...a, properties: {...a.properties, position: Vec2.Sub(a.properties.position)(position), anchor: Vec2.Sub(a.properties.position)(position), }}})\n      : entities,\n      properties: {\n        position: position,\n        anchor: position,\n        scale: { x: 1, y: 1 },\n        rotation: 0,\n        size: placeOriginAndAnchorAtGeometricCenter === true ? { width: maxX - minX, height: maxY - minY } : { width: halfMaxDim * 2, height: halfMaxDim * 2 },\n      },\n      components: [{\n        update: (delta, ent, s, ps) => {\n          let newState = ps;\n          let e = ent as FolderEntity;\n          e.entities = e.entities.map((a) => {\n            const finComp = a.components.reduce(([pe, pns], c) => {\n              return c.update(delta, pe, s, pns);\n            }, [a, newState] as [Entity, EngineState]);\n            newState = finComp[1];\n            return finComp[0];\n          });\n          return [e, newState];\n        }\n      }],\n      shaders: [],\n      render: (es: EngineState) => (ent: Entity) => {\n        let e: FolderEntity = ent as FolderEntity;\n        let vals = applyFolderTransformation(e, e.entities).map((a) => { return a.render(es)(a); }).map((a, ind) => { return {...a, key: ind }; });\n        if(SHOW_TRANSFORMATION_POINTS){\n          const tranformation = StyleConversions.ComputeEntityWorldTransformation(es)(e);\n          const at: Transformation = {\n            ...tranformation,\n            anchor: {\n              x: tranformation.anchor.x + (es.config.width / 2),\n              y: (es.config.height / 2) + tranformation.anchor.y\n            }\n          };\n          if(RENDERING_ENGINE === 'canvas'){\n            const ctx = es.canvas?.getContext('2d');\n            if(!ctx) throw new Error('Cannot get canvas context!');\n            ctx.save();\n            ctx.fillStyle = 'red';\n            ctx.translate(at.anchor.x, at.anchor.y);\n            // ctx.rotate(at.rotation);\n            ctx.fillRect(-10, -10, 20, 20);\n            ctx.restore();\n            ctx.save();\n            ctx.fillStyle = 'blue';\n            ctx.translate(at.anchor.x, at.anchor.y);\n            ctx.translate(at.translation.x, at.translation.y);\n            // ctx.rotate(at.rotation);\n            ctx.fillRect(-5, -5, 10, 10);\n            ctx.restore(); \n            ctx.save();\n            ctx.strokeStyle = 'black';\n            ctx.translate(at.anchor.x, at.anchor.y);\n            ctx.translate(at.translation.x, at.translation.y);\n            ctx.moveTo(0,0);\n            ctx.lineTo(-at.translation.x, -at.translation.y);\n            ctx.stroke();\n            ctx.restore();\n          } else {\n            throw new Error('Transformation point rendering not currently supported in React.');\n          }\n        }\n        return <>{vals}</>;\n      },\n    };\n    return ret;\n  };\n\n}\n\nclass EntitiesUtils {\n\n  static GetEntityOrigin = (es: EngineState) => (e: Entity): Vector2 => {\n    let origin: Vector2;\n    if (es.config.origin === \"center\") {\n      origin = e.properties.position;\n    } else if (es.config.origin === \"topleft\") {\n      origin = {\n        x:\n          e.properties.position.x -\n          (e.properties.scale.x * e.properties.size.width) / 2,\n        y:\n          e.properties.position.y +\n          (e.properties.scale.y * e.properties.size.height) / 2,\n      };\n    } else if (es.config.origin === \"bottomleft\") {\n      origin = {\n        x:\n          e.properties.position.x -\n          (e.properties.scale.x * e.properties.size.width) / 2,\n        y:\n          e.properties.position.y -\n          (e.properties.scale.y * e.properties.size.height) / 2,\n      };\n    } else {\n      throw new Error(\"No such origin location option: \" + es.config.origin);\n    }\n    return origin;\n  };\n\n  static GetEntityBBOrigin = (es: EngineState) => (e: Entity): Vector2 => {\n    const eBB = EntitiesUtils.ComputeEntityBoundingBox(es)(e);\n    let newOriginPos: Vector2;\n    if (es.config.origin === \"center\") {\n      newOriginPos = { x: (eBB.minXminY.x + eBB.maxXmaxY.x) / 2, y: (eBB.minXminY.y + eBB.maxXmaxY.y) / 2 };\n    } else if (es.config.origin === \"topleft\") {\n      newOriginPos = eBB.minXmaxY;\n    } else if (es.config.origin === \"bottomleft\") {\n      newOriginPos = eBB.minXminY;\n    } else {\n      throw new Error(\"No such origin location: \" + es.config.origin);\n    }\n    return newOriginPos;\n  }\n\n  static ComputeEntityBoundingBox = (es: EngineState) => (\n    e: Entity\n  ): BoundingBox => {\n    let origin: Vector2 = EntitiesUtils.GetEntityOrigin(es)(e);\n    let pointsToConsider: Vector2[] = [\n      {\n        x:\n          e.properties.position.x -\n          (e.properties.size.width * e.properties.scale.x) / 2,\n        y:\n          e.properties.position.y -\n          (e.properties.size.height * e.properties.scale.y) / 2,\n      },\n      {\n        x:\n          e.properties.position.x -\n          (e.properties.size.width * e.properties.scale.x) / 2,\n        y:\n          e.properties.position.y +\n          (e.properties.size.height * e.properties.scale.y) / 2,\n      },\n      {\n        x:\n          e.properties.position.x +\n          (e.properties.size.width * e.properties.scale.x) / 2,\n        y:\n          e.properties.position.y -\n          (e.properties.size.height * e.properties.scale.y) / 2,\n      },\n      {\n        x:\n          e.properties.position.x +\n          (e.properties.size.width * e.properties.scale.x) / 2,\n        y:\n          e.properties.position.y +\n          (e.properties.size.height * e.properties.scale.y) / 2,\n      },\n    ].map(MathUtil.RotatePositionAboutPoint(e.properties.rotation)(origin));\n  \n    let minX = pointsToConsider.reduce((pr, cu) => {\n      if (cu.x < pr.x) {\n        return cu;\n      } else {\n        return pr;\n      }\n    }, pointsToConsider[0]).x;\n    let minY = pointsToConsider.reduce((pr, cu) => {\n      if (cu.y < pr.y) {\n        return cu;\n      } else {\n        return pr;\n      }\n    }, pointsToConsider[0]).y;\n    let maxX = pointsToConsider.reduce((pr, cu) => {\n      if (cu.x > pr.x) {\n        return cu;\n      } else {\n        return pr;\n      }\n    }, pointsToConsider[0]).x;\n    let maxY = pointsToConsider.reduce((pr, cu) => {\n      if (cu.y > pr.y) {\n        return cu;\n      } else {\n        return pr;\n      }\n    }, pointsToConsider[0]).y;\n  \n    const bb: BoundingBox = {\n      minXminY: { x: minX, y: minY },\n      minXmaxY: { x: minX, y: maxY },\n      maxXminY: { x: maxX, y: minY },\n      maxXmaxY: { x: maxX, y: maxY },\n    };\n    return bb;\n  };\n\n}","// Overall engine-wide state transformations\nexport class Games {\n\n  static TickActiveScene = (state: EngineState) => (delta: number): EngineState => {\n    let newState = state;\n    if(newState.activeScene === null){\n      throw new Error('Cannot tick a null active scene!');\n    }\n    let newActiveScene = newState.activeScene;\n    newActiveScene.entities = newActiveScene.entities.map((e) => {\n      const finComp = e.components.reduce(([pe, pns], c) => {\n        return c.update(delta, pe, newActiveScene, pns);\n      }, [e, newState] as [Entity, EngineState]);\n      newState = finComp[1];\n      return finComp[0];\n    });\n    newState.activeScene = newActiveScene;\n    newState.scenes = newState.scenes.map((s) => {\n      if(s.uuid === newActiveScene.uuid){\n        return newActiveScene;\n      } else {\n        return s;\n      }\n    });\n    return newState;\n  };\n\n  static InitEngine = (config?: GlobalConfig, canvas?: HTMLCanvasElement): EngineState => {\n    return {\n      scenes: [],\n      activeScene: null,\n      config: config ?? { origin: 'center', width: window.innerWidth, height: window.innerHeight },\n      canvas: canvas ?? null\n    };\n  };\n}","// Functions for editing the scenes of a gamestate\nexport class Scenes {\n\n  static CreateScene = (state: EngineState) => (sceneID: string, setActive?: boolean): EngineState => {\n    let newScene = {\n      uuid: String(sceneID),\n      entities: [],\n    };\n    return {\n      ...state,\n      scenes: state.scenes.concat(newScene),\n      activeScene: setActive === true ? newScene : state.activeScene\n    };\n  };\n\n  static ActivateScene = (state: EngineState) => (sceneID: string): EngineState => {\n    let newScene = state.scenes.find(a => a.uuid === sceneID);\n    if(newScene === undefined){\n      throw new Error('Couldn\\'t find a scene with sceneID: ' + sceneID);\n    }\n    return {\n      ...state,\n      activeScene: newScene\n    };\n  };\n\n  static AddEntityToScene = (state: EngineState) => (sceneID: string) => (\n    e: Entity\n  ): EngineState => {\n    let foundScene = state.scenes.find((a) => a.uuid === sceneID);\n    if (foundScene === undefined) throw new Error(\"No scene could be found with sceneID\" + sceneID);\n    let newState = state;\n    let changedScene: Scene | null = null;\n    newState.scenes = newState.scenes.map((a) => {\n      if (a.uuid !== foundScene?.uuid) return a;\n      changedScene = {\n        ...a,\n        entities: a.entities.concat(e)\n      };\n      return changedScene;\n    });\n    if(changedScene === null) throw new Error(\"No scene could be found with sceneID\" + sceneID);\n    return {\n      ...newState,\n      activeScene: (foundScene.uuid === newState.activeScene?.uuid) ? changedScene : newState.activeScene\n    };\n  };\n\n  static RemoveEntityFromScene = (state: EngineState) => (sceneID: string) => (\n    e: Entity\n  ): EngineState => {\n    let foundScene = state.scenes.find((a) => a.uuid === sceneID);\n    if (foundScene === undefined) throw new Error(\"No scene could be found with sceneID\" + sceneID);\n    let newState = state;\n    let changedScene: Scene | null = null;\n    newState.scenes = newState.scenes.map((a) => {\n      if (a.uuid !== foundScene?.uuid) return a;\n      changedScene = {\n        ...foundScene,\n        entities: a.entities.filter(et => et.uuid !== e.uuid)\n      };\n      return changedScene;\n    });\n    if(changedScene === null) throw new Error(\"No scene could be found with sceneID\" + sceneID);\n    return {\n      ...newState,\n      activeScene: (foundScene.uuid === newState.activeScene?.uuid) ? changedScene : newState.activeScene\n    };\n  };\n}","import { AnimationFactory } from \"../components/animation/engine\";\nimport { Cameras } from \"./camera\";\nimport { Entities } from \"./entity\";\nimport { Games } from \"./game\";\nimport { Renderers, StyleConversions } from \"./renderers\";\nimport { Scenes } from \"./scene\";\n\nconst Rengine = {\n  Camera: Cameras,\n  Entity: Entities,\n  Game: Games,\n  Renderer: Renderers,\n  Scene: Scenes,\n  StyleConversion: StyleConversions,\n  Animation: AnimationFactory,\n};\n\nexport default Rengine;\n\nexport class Vec2 {\n  static Add = (v1: Vector2) => (v2: Vector2) => { return { x: v1.x + v2.x, y: v1.y + v2.y } };\n  static Sub = (v1: Vector2) => (v2: Vector2) => { return { x: v1.x - v2.x, y: v1.y - v2.y } };\n  static Mul = (v1: Vector2) => (v2: Vector2) => { return { x: v1.x * v2.x, y: v1.y * v2.y } };\n  static Div = (v1: Vector2) => (v2: Vector2) => { return { x: v1.x / v2.x, y: v1.y / v2.y } };\n  static Neg = (v1: Vector2) => { return { x: -v1.x, y: -v1.y } };\n}\n\nexport class Colors {\n  static ColorToString = (c: Color): string => {\n    return \"rgba(\" + c.r + \",\" + c.g + \",\" + c.b + \",\" + c.a + \")\";\n  };\n  static rgbaToColor = (r: number, g: number, b: number, a: number): Color => {\n    return { r: r, g: g, b: b, a: a };\n  };\n}\n\nexport class MathUtil {\n  static RotatePositionAboutPoint = (rad: number) => (about: Vector2) => (\n    pos: Vector2\n  ): Vector2 => {\n    let cos = Math.cos(rad),\n      sin = Math.sin(rad),\n      run = pos.x - about.x,\n      rise = pos.y - about.y,\n      cx = cos * run + sin * rise + about.x,\n      cy = cos * rise - sin * run + about.y;\n    return {\n      x: cx,\n      y: cy,\n    };\n  };\n}\n","import Rengine from \"./engine\";\nimport { FPS_LIMIT, LOOP_MODE, update } from \"../Lifecycle\";\n\nlet ANIMATION_FRAME: number = -1;\n\n// This is a magic number, I do not know why, but the limiting will be inaccurate\n// unless you multiply the limit by this ratio before checking (line 50) in canvas mode\nconst CANVAS_FRAME_LIMIT_RATIO = (4/3);\n\nexport let LAST_UPDATE: number = -1;\nexport let FRAMES_SINCE_STARTUP = 0;\nlet CLOCK: NodeJS.Timeout | null = null;\n\nclass EngineStateContainer {\n  static lastState: EngineState;\n}\n\nexport const StartGameLoop = ([state, render]: [EngineState, (es: EngineState) => any]) => {\n  EngineStateContainer.lastState = state;\n  if(LOOP_MODE === 'interval'){\n    if(CLOCK === null){\n      CLOCK = setInterval(() => {\n        EngineStateContainer.lastState = DoFrame([EngineStateContainer.lastState, render]);\n      }, 1000/FPS_LIMIT);\n      EngineStateContainer.lastState = DoFrame([EngineStateContainer.lastState, render]);\n    }\n  } else if (LOOP_MODE === 'animation') {\n    let cb: FrameRequestCallback = () => {\n      let animFrameBefore = ANIMATION_FRAME;\n      if(Date.now() - LAST_UPDATE < (1000 / (FPS_LIMIT * CANVAS_FRAME_LIMIT_RATIO))){\n        ANIMATION_FRAME = window.requestAnimationFrame(cb);\n        return;\n      } else {\n        EngineStateContainer.lastState = DoFrame([EngineStateContainer.lastState, render]);\n        let animFrameAfter = ANIMATION_FRAME;\n        if(animFrameAfter === -1 && animFrameBefore !== -1) return;\n        ANIMATION_FRAME = window.requestAnimationFrame(cb);\n      }\n    };\n    cb(-1);\n  } else {\n    throw new Error('No such LOOP_MODE called ' + LOOP_MODE + '!');\n  }\n};\n\nexport const EndGameLoop = () => {\n  if(LOOP_MODE === 'interval'){\n    if(CLOCK !== null){\n      clearInterval(CLOCK);\n      CLOCK = null;\n    }\n  } else if (LOOP_MODE === 'animation') {\n    if(ANIMATION_FRAME !== -1){\n      window.cancelAnimationFrame(ANIMATION_FRAME);\n      ANIMATION_FRAME = -1;\n    }\n  } else {\n    throw new Error('No such LOOP_MODE called ' + LOOP_MODE + '!');\n  }\n  LAST_UPDATE = -1;\n  FRAMES_SINCE_STARTUP = 0;\n};\n\nconst DoFrame = ([state, render]: [EngineState, (es: EngineState) => any]): EngineState => {\n  EngineStateContainer.lastState = state;\n  const currTimeMs = Date.now();\n  const delta = (LAST_UPDATE === -1) ? 1 : currTimeMs - LAST_UPDATE;\n  const newState = Rengine.Game.TickActiveScene(EngineStateContainer.lastState)(delta);\n  const newState2 = update(delta, newState);\n  render(newState2);\n  LAST_UPDATE = currTimeMs;\n  FRAMES_SINCE_STARTUP = FRAMES_SINCE_STARTUP + 1;\n  return newState2;\n}","import React, { useEffect, useRef } from \"react\";\nimport \"./App.css\";\nimport { StartGameLoop } from \"../Loop\";\nimport { init } from '../../Lifecycle';\n\nlet gameStarted: boolean = true;\n\nconst App: React.FunctionComponent = () => {\n  if(gameStarted){\n    return <GameCanvas />;\n  } else {\n    return <p>Game not started!</p>;\n  }\n}\n\nconst canvasStyle: React.CSSProperties = {\n  height: window.innerHeight,\n  width: window.innerWidth,\n  position: \"absolute\",\n  top: 0,\n  left: 0,\n};\n\nconst GameCanvas: React.FunctionComponent = () => {\n  let canvasRef = useRef<HTMLCanvasElement>(null);\n  useEffect(() => {\n    if(canvasRef.current === null){\n      throw new Error('Couldn\\'t find canvasRef!');\n    } else {\n      StartGameLoop([init(canvasRef.current), (es: EngineState) => {\n        const ctx = es.canvas?.getContext('2d');\n        if(!ctx) throw new Error('Cannot get canvas context!');\n        ctx.fillStyle = 'white';\n        ctx.beginPath();\n        ctx.fillRect(0, 0, es.config.width, es.config.height);\n        ctx.stroke();\n        es.activeScene?.entities.forEach((e) => {\n          e.render(es)(e);\n        });\n      }]);\n    }\n  }, [])\n  return <canvas ref={canvasRef} style={canvasStyle} width={window.innerWidth} height={window.innerHeight}/>\n};\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport AppCanvas from './engine/app-renderers/App';\nimport AppReact from './engine/app-renderers/App-React';\nimport reportWebVitals from './reportWebVitals';\nimport { RENDERING_ENGINE } from './Lifecycle';\n\nexport const App = (RENDERING_ENGINE === 'canvas') ? AppCanvas : AppReact;\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}